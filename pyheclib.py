# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _pyheclib
else:
    import _pyheclib

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def new_intp():
    return _pyheclib.new_intp()

def copy_intp(value):
    return _pyheclib.copy_intp(value)

def delete_intp(obj):
    return _pyheclib.delete_intp(obj)

def intp_assign(obj, value):
    return _pyheclib.intp_assign(obj, value)

def intp_value(obj):
    return _pyheclib.intp_value(obj)

def new_doublep():
    return _pyheclib.new_doublep()

def copy_doublep(value):
    return _pyheclib.copy_doublep(value)

def delete_doublep(obj):
    return _pyheclib.delete_doublep(obj)

def doublep_assign(obj, value):
    return _pyheclib.doublep_assign(obj, value)

def doublep_value(obj):
    return _pyheclib.doublep_value(obj)
class intArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _pyheclib.intArray_swiginit(self, _pyheclib.new_intArray(nelements))
    __swig_destroy__ = _pyheclib.delete_intArray

    def __getitem__(self, index):
        return _pyheclib.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pyheclib.intArray___setitem__(self, index, value)

    def cast(self):
        return _pyheclib.intArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _pyheclib.intArray_frompointer(t)

# Register intArray in _pyheclib:
_pyheclib.intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _pyheclib.intArray_frompointer(t)

class doubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _pyheclib.doubleArray_swiginit(self, _pyheclib.new_doubleArray(nelements))
    __swig_destroy__ = _pyheclib.delete_doubleArray

    def __getitem__(self, index):
        return _pyheclib.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pyheclib.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _pyheclib.doubleArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _pyheclib.doubleArray_frompointer(t)

# Register doubleArray in _pyheclib:
_pyheclib.doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _pyheclib.doubleArray_frompointer(t)


def chrlnb_(cline, ilast, _cline_len):
    return _pyheclib.chrlnb_(cline, ilast, _cline_len)

def juldat_(jul, istyle, cdate, ndate, _cdate_len):
    return _pyheclib.juldat_(jul, istyle, cdate, ndate, _cdate_len)

def m2ihm_(min, ctime, _ctime_len):
    return _pyheclib.m2ihm_(min, ctime, _ctime_len)

def zcat_(ifltab, icunit, icdunt, inunit, cinstr, labrev, ldosrt, lcdcat, norecs, _cinstr_len):
    return _pyheclib.zcat_(ifltab, icunit, icdunt, inunit, cinstr, labrev, ldosrt, lcdcat, norecs, _cinstr_len)

def zdtype_(ifltab, cpath, ndata, lfound, cdtype, idtype, _cpath_len, _cdtype_len):
    return _pyheclib.zdtype_(ifltab, cpath, ndata, lfound, cdtype, idtype, _cpath_len, _cdtype_len)

def zfname_(cin, cname, nname, lexist, _cin_len, _cname_len):
    return _pyheclib.zfname_(cin, cname, nname, lexist, _cin_len, _cname_len)

def zgintl_(intl, chintl, nodata, istat, _chintl_len):
    return _pyheclib.zgintl_(intl, chintl, nodata, istat, _chintl_len)

def zopen_(ifltab, cfname, istat, _cfname_len):
    return _pyheclib.zopen_(ifltab, cfname, istat, _cfname_len)

def zset_(cflg, cstr, numb, _cflg_len, _cstr_len):
    return _pyheclib.zset_(cflg, cstr, numb, _cflg_len, _cstr_len)

def zsitsx_(ifltab, cpath, itimes, values, nvalue, ibdate, jqual, lsqual, cunits, ctype, iuhead, nuhead, inflag, istat, _cpath_len, _cunits_len, _ctype_len):
    return _pyheclib.zsitsx_(ifltab, cpath, itimes, values, nvalue, ibdate, jqual, lsqual, cunits, ctype, iuhead, nuhead, inflag, istat, _cpath_len, _cunits_len, _ctype_len)

def zritsxd_(ifltab, cpath, juls, istime, jule, ietime, itimes, dvalues, kvals, nvals, ibdate, iqual, lqual, lqread, cunits, ctype, iuhead, kuhead, nuhead, inflag, istat, _cpath_len, _cunits_len, _ctype_len):
    return _pyheclib.zritsxd_(ifltab, cpath, juls, istime, jule, ietime, itimes, dvalues, kvals, nvals, ibdate, iqual, lqual, lqread, cunits, ctype, iuhead, kuhead, nuhead, inflag, istat, _cpath_len, _cunits_len, _ctype_len)

def zrpdd_(ifltab, cpath, nord, ncurve, ihoriz, c1unit, c1type, c2unit, c2type, dvalues, kvals, nvals, clabel, klabel, label, iuhead, kuhead, nuhead, istat, _cpath_len, _c1unit_len, _c1type_len, _c2unit_len, _c2type_len, _clabel_len):
    return _pyheclib.zrpdd_(ifltab, cpath, nord, ncurve, ihoriz, c1unit, c1type, c2unit, c2type, dvalues, kvals, nvals, clabel, klabel, label, iuhead, kuhead, nuhead, istat, _cpath_len, _c1unit_len, _c1type_len, _c2unit_len, _c2type_len, _clabel_len)

def zrrtsx_(ifltab, cpath, cdate, ctime, nvals, svalues, jqual, lqual, lqread, iuhead, kuhead, nuhead, iofset, jcomp, istat, _cpath_len, _cdate_len, _ctime_len, _cunits_len, _ctype_len):
    return _pyheclib.zrrtsx_(ifltab, cpath, cdate, ctime, nvals, svalues, jqual, lqual, lqread, iuhead, kuhead, nuhead, iofset, jcomp, istat, _cpath_len, _cdate_len, _ctime_len, _cunits_len, _ctype_len)

def zrrtsxd_(ifltab, cpath, cdate, ctime, nvals, dvalues, jqual, lqual, lqread, iuhead, kuhead, nuhead, iofset, jcomp, istat, _cpath_len, _cdate_len, _ctime_len, _cunits_len, _ctype_len):
    return _pyheclib.zrrtsxd_(ifltab, cpath, cdate, ctime, nvals, dvalues, jqual, lqual, lqread, iuhead, kuhead, nuhead, iofset, jcomp, istat, _cpath_len, _cdate_len, _ctime_len, _cunits_len, _ctype_len)

def hec_zrrtsxd(ifltab, cpath, cdate, ctime, numpyvalues, jqual, lqual, lqread, iuhead, kuhead, nuhead, iofset, jcomp, istat, _cpath_len, _cdate_len, _ctime_len, _cunits_len, _ctype_len):
    return _pyheclib.hec_zrrtsxd(ifltab, cpath, cdate, ctime, numpyvalues, jqual, lqual, lqread, iuhead, kuhead, nuhead, iofset, jcomp, istat, _cpath_len, _cdate_len, _ctime_len, _cunits_len, _ctype_len)

def zclose_(ifltab):
    return _pyheclib.zclose_(ifltab)

def fortranclose_(INPUT):
    return _pyheclib.fortranclose_(INPUT)

def fortranflush_(INPUT):
    return _pyheclib.fortranflush_(INPUT)

def fortranopen_(INPUT, filename, _filename_len):
    return _pyheclib.fortranopen_(INPUT, filename, _filename_len)


